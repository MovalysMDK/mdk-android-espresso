apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

project.archivesBaseName = 'mdk-espresso'

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.0 rc2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 100
        versionName "1.0.0"
    }
    buildTypes {
        debug {
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support.test.espresso:espresso-core:$supportTestEspressoVersion"
    compile "com.android.support.test:runner:$supportTestRunnerVersion"
    compile "com.squareup.spoon:spoon-client:$spoonClientVersion"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mdkArtifactoryRepoReleases) {
                authentication(userName: mdkArtifactoryUsername, password: mdkArtifactoryPassword)
            }
            snapshotRepository(url: mdkArtifactoryRepoSnapshots) {
                authentication(userName: mdkArtifactoryUsername, password: mdkArtifactoryPassword)
            }
        }
    }
}

sonarRunner {
    sonarProperties {
        properties["sonar.sources"] = android.sourceSets.main.java.srcDirs
        properties["sonar.binaries"] = file("build/intermediates/classes/debug")
        property "sonar.sourceEncoding", "UTF-8"
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    task("jar${name.capitalize()}", type: Jar) {
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
    }
    project.artifacts.add("archives", tasks["jar${name.capitalize()}"]);

    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }

    task("javadoc${variant.name.capitalize()}", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = files("${project.android.sdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar")
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        failOnError false
        title project.archivesBaseName + " " + project.version
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PRIVATE
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline("http://d.android.com/reference", "${project.android.sdkDirectory}/docs/reference");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["javadoc${variant.name.capitalize()}"]
    }

    // Add the Javadoc jar to the project's artifacts. This will allow us to upload it easily later
    project.artifacts.add("archives", tasks["bundleJavadoc${variant.name.capitalize()}"]);
}

